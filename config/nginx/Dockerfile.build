ARG DEBIAN_VERSION

FROM debian:${DEBIAN_VERSION}

ARG PROJECT_DOMAIN_1
ARG PROJECT_DOMAIN_2
ARG PROJECT_DOMAIN_3
ARG PROJECT_DOMAIN_4
ARG DOCUMENT_ROOT
ARG SYMFONY_FRONT_CONTROLLER
ARG PHP_MAX_EXECUTION_TIME
ARG PHP_UPLOAD_MAX_FILESIZE

ARG PORT_PHP

MAINTAINER Vasilij Dusko <support@d4d.lt>

RUN apt-get update \
    && apt-get install --no-install-recommends --no-install-suggests -y \
    curl gnupg2 ca-certificates lsb-release debian-archive-keyring \
    && curl https://nginx.org/keys/nginx_signing.key | gpg --dearmor \
        | tee /usr/share/keyrings/nginx-archive-keyring.gpg >/dev/null \
    && gpg --dry-run --quiet --no-keyring --import --import-options import-show /usr/share/keyrings/nginx-archive-keyring.gpg \
    && echo "deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \
       http://nginx.org/packages/debian `lsb_release -cs` nginx" \
           | tee /etc/apt/sources.list.d/nginx.list \
    && printf 'Package: *\nPin: origin nginx.org\nPin: release o=nginx\nPin-Priority: 900\n' > /etc/apt/preferences.d/99nginx \
    && apt-get update \
	&& apt-get install --no-install-recommends --no-install-suggests -y \
						nginx \
						gettext-base \
						nano \
	&& apt-get remove --purge -y gnupg2 \
    && apt-get -y --purge autoremove \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

COPY project.conf /etc/nginx/sites-available/
COPY rewrite/project.conf /etc/nginx/rewrite/

COPY ["d4d/cache.conf", "d4d/sf.conf", "/etc/nginx/d4d/"]
__D4D_SSL__

# optional commands to run at shell inside container at build time
# this one adds package repo for nginx from nginx.org and installs it
# forward request and error logs to docker log collector

RUN ln -sf /dev/stdout /var/log/nginx/access.log \
	&& ln -sf /dev/stderr /var/log/nginx/error.log \
	&& mkdir -p /etc/nginx/sites-available \
	&& mkdir -p /etc/nginx/sites-enabled \
	&& mkdir -p /etc/nginx/d4d \
	&& mkdir -p /etc/nginx/rewrite \
	&& sed -i 's#__PROJECT_DOMAIN_1__#'"${PROJECT_DOMAIN_1}"'#g' /etc/nginx/sites-available/project.conf \
	&& sed -i 's#__PROJECT_DOMAIN_2__#'"${PROJECT_DOMAIN_2}"'#g' /etc/nginx/sites-available/project.conf \
    && sed -i 's#__PROJECT_DOMAIN_3__#'"${PROJECT_DOMAIN_3}"'#g' /etc/nginx/sites-available/project.conf \
    && sed -i 's#__PROJECT_DOMAIN_4__#'"${PROJECT_DOMAIN_4}"'#g' /etc/nginx/sites-available/project.conf \
    && sed -i 's#__DOCUMENT_ROOT__#'"${DOCUMENT_ROOT}"'#g' /etc/nginx/sites-available/project.conf \
    && sed -i 's#__SYMFONY_FRONT_CONTROLLER__#'"${SYMFONY_FRONT_CONTROLLER}"'#g' /etc/nginx/sites-available/project.conf \
    && sed -i 's#__PHP_MAX_EXECUTION_TIME__#'"${PHP_MAX_EXECUTION_TIME}"'#g' /etc/nginx/sites-available/project.conf \
    && sed -i 's#__PHP_UPLOAD_MAX_FILESIZE__#'"${PHP_UPLOAD_MAX_FILESIZE}"'#g' /etc/nginx/sites-available/project.conf \
    && ln -s /etc/nginx/sites-available/project.conf /etc/nginx/sites-enabled/project.conf \
    && rm -rf /etc/nginx/sites-enabled/default \
    && echo "upstream php-upstream { server php:${PORT_PHP}; }" > /etc/nginx/conf.d/upstream.conf

CMD ["nginx", "-g", "daemon off;"]
# required: run this command when container is launched
# only one CMD allowed, so if there are multiple, last one wins