#!/bin/bash

DOCKER_SCRIPT_VER=1.0.18

OS=`uname`
WORK_DIR=`pwd`

cd ${WORK_DIR}

#Added for security
chmod 700 ${WORK_DIR}/docker >/dev/null 2>&1
chmod 700 ${WORK_DIR} >/dev/null 2>&1

ENV=${WORK_DIR}/.env
ENV_DIST=${WORK_DIR}/.env.dist

ENV_SECRET=${WORK_DIR}/.env.secret
ENV_SECRET_DIST=${WORK_DIR}/.env.secret.dist

D4D_ENV=${ENV}

if [ ! -e ${ENV} ]; then
  cp "${ENV_DIST}" "${ENV}"
fi

if [ ! -e ${ENV_SECRET} ]; then
  cp "${ENV_SECRET_DIST}" "${ENV_SECRET}"
fi

if [ ! -e ${D4D_ENV} ]; then
  cp "${D4D_ENV}" "${ENV}"
fi

# stream editor (sed)
function replace_in_file() {
    if [ "$OS" = 'Darwin' ]; then
        # for MacOS
        sed -i '' "$1" "$2"
    else
        # for Linux and Windows
        sed -i'' "$1" "$2"
    fi
}

function remove_duplicate() {
    if [ "$OS" = 'Darwin' ]; then
        # for MacOS
        sed -i '' '$!N; /^\(.*\)\n\1$/!P; D' "$1"
    else
        # for Linux and Windows
        sed -i'' '$!N; /^\(.*\)\n\1$/!P; D' "$1"
    fi
}

# Emulate ${!variable}
eval_var() {
    var=${1}
        if [ -z ${var} ]; then
            echo ""
        else
            eval newval="\$${var}"
            echo $newval
        fi
}

# Get OS version
DEBIAN_VERSION=/etc/debian_version
if [ "${OS}" = "Darwin" ]; then
    OS_VERSION=`uname -r | cut -d- -f1`
elif [ "${OS}" = "FreeBSD" ]; then
    OS_VERSION=`uname -r | cut -d- -f1`
	  OS_FREEBSD_VERSION=`echo ${OS_VER} | cut -d. -f1`
elif [ -e ${DEBIAN_VERSION} ]; then
	  OS_DEBIAN_VERSION=`grep -m1 -o '^[^\.]*' ${DEBIAN_VERSION}`
else
    if [ -s /etc/os-release ]; then
		    OS_CENTOS_VERSION=`grep -m1 '^VERSION_ID=' /etc/os-release | cut -d. -f1 | cut -d'"' -f2`
	  else
		    OS_CENTOS_VERSION=`grep -m1 -o '[0-9]*\.[0-9]*' /etc/redhat-release | cut -d. -f1`
	  fi
fi

HIDE_CHANGES=0

getOpt() {
	# $1 is option name
	# $2 is default value

    source ${D4D_ENV}

	GET_OPTION="$(eval_var $1)"
	if [ "${GET_OPTION}" = "" ]; then
		echo "$1=$2" >> ${ENV}
		GET_OPTION="${2}"
		eval `echo "${1}=${2}"`
	fi

	echo ${GET_OPTION}
}


getContainerName() {
  # $1 is option name

  CURRENT_DIR=`basename ${WORK_DIR}`
  if [ "$OS" = 'Darwin' ]; then
      # for MacOS
      CONTAINER_NAME="${CURRENT_DIR}_${1}_1"
  else
      # for Linux and Windows
      CONTAINER_NAME="${CURRENT_DIR}-${1}-1"
  fi

  echo ${CONTAINER_NAME}
}

getContainerId() {
  # $1 is option name

  echo $1

  CURRENT_DIR=`basename ${WORK_DIR}`
  CONTAINER_NAME="${CURRENT_DIR}_${1}_1"
  CONTAINER_ID=`docker ps -aqf name=^${CONTAINER_NAME}$`

  echo ${CONTAINER_ID}
}

getContainerIpAddress() {
  # $1 is option name

  CONTAINER_NAME=`getContainerName $1`
  IP_ADDRESS=`docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CONTAINER_NAME}`

  echo ${IP_ADDRESS}
}

##################################################
# Variables for bolded text
boldon="`tput -Txterm bold`"
boldoff="`tput -Txterm sgr0`"
##################################################

setOpt() {
	#$1 is option name
	#$2 is value
	READ_OPTION_NAME="`echo \"$1\" | tr '[:lower:]' '[:upper:]'`"
	READ_OPTION_VALUE="`echo \"$2\" | perl -p0 -e 's|@|\\\\@|g'`"

	VAR=`echo ${READ_OPTION_NAME} | tr "[a-z]" "[A-Z]"`
	if [ -z "$(eval_var ${VAR}_DEF)" ]; then
		echo "${READ_OPTION_NAME} is not a valid option."
		EXIT_CODE=50
		return
	fi

	VALID="no"
	for i in $(eval_var ${VAR}_SET); do
		if [ "${i}" = "${READ_OPTION_VALUE}" ] || [ "${i}" = "userinput" ]; then
			VALID="yes"
			break
		fi
	done

	if [ "${VALID}" = "no" ]; then
		echo "${READ_OPTION_VALUE} is not a valid setting for ${READ_OPTION_NAME} option."
		EXIT_CODE=51
		return
	fi
	OPT_VALUE="`grep -m1 "^${READ_OPTION_NAME}=" ${ENV} | cut -d= -f2 | perl -p0 -e 's|@|\\\\@|g'`"
	perl -pi -e "s#${READ_OPTION_NAME}=${OPT_VALUE}#${READ_OPTION_NAME}=${READ_OPTION_VALUE}#" ${ENV}
	if [ "${HIDE_CHANGES}" = "0" ]; then
		echo "Changed ${boldon}${READ_OPTION_NAME}${boldoff} option from ${boldon}${OPT_VALUE}${boldoff} to ${boldon}${READ_OPTION_VALUE}${boldoff}" | perl -p0 -e 's|\\\@|\@|g'
	fi
}

##################################################

# PHP
PHP_VERSION_SET="5.6 7.0 7.1 7.2 7.3 7.4"
PHP_VERSION_DEF="7.4"
PHP_VERSION_OPT=`getOpt PHP_VERSION ${PHP_VERSION_DEF}`

# MySQL
MYSQL_VERSION_SET="5.6 5.7 8.0"
MYSQL_VERSION_DEF="5.6"
MYSQL_VERSION_OPT=`getOpt MYSQL_VERSION ${MYSQL_VERSION_DEF}`

# Debian
DEBIAN_VERSION_SET="stretch buster"
DEBIAN_VERSION_DEF="buster"
DEBIAN_VERSION_OPT=`getOpt DEBIAN_VERSION ${DEBIAN_VERSION_DEF}`

# Node.js version
NODE_JS_VERSION_SET="4.x 6.x 7.x 8.x 9.x 10.x 11.x 12.x 13.x"
NODE_JS_VERSION_DEF="10.x"
NODE_JS_VERSION_OPT=`getOpt NODE_JS_VERSION ${NODE_JS_VERSION_DEF}`

# Optional configuration
IONCUBE_SET="yes no"
IONCUBE_DEF="no"
IONCUBE_OPT=`getOpt IONCUBE ${IONCUBE_DEF}`
IONCUBE_DESC="ionCube is a PHP module extension that loads encrypted PHP files and speeds up webpages. It is often required for PHP-based applications."

XDEBUG_SET="yes no"
XDEBUG_DEF="no"
XDEBUG_OPT=`getOpt XDEBUG ${XDEBUG_DEF}`
XDEBUG_DESC="Xdebug - Debugger and Profiler Tool for PHP"

PROJECT_TYPE_SET="SF SF_PWA WP"
PROJECT_TYPE_DEF="SF"
PROJECT_TYPE_OPT=`getOpt PROJECT_TYPE ${PROJECT_TYPE_DEF}`

YARN_SET="yes no"
YARN_DEF="yes"
YARN_OPT=`getOpt YARN ${YARN_DEF}`

WKHTMLTOPDF_SET="yes no"
WKHTMLTOPDF_DEF="yes"
WKHTMLTOPDF_OPT=`getOpt WKHTMLTOPDF ${WKHTMLTOPDF_DEF}`

NGINX_CACHE_SET="yes no"
NGINX_CACHE_DEF="yes"
NGINX_CACHE_OPT=`getOpt NGINX_CACHE ${NGINX_CACHE_DEF}`

PMA_AUTO_LOGIN_SET="yes no"
PMA_AUTO_LOGIN_DEF="no"
PMA_AUTO_LOGIN_OPT=`getOpt PMA_AUTO_LOGIN ${PMA_AUTO_LOGIN_DEF}`
PMA_AUTO_LOGIN_DESC="phpMyAdmin auto login"

##################################################

# Help sections
HELP_SECTIONS="DOCKER_RUN DOCKER_MYSQL DOCKER_PASSWD D4D_UPDATE DOCKER_D4D"
DOCKER_RUN_SET="install uninstall start stop restart exec logs prune update_images"
DOCKER_RUN_DESC="Docker for Symfony (PHP-FPM - NGINX - MySQL)"
DOCKER_RUN_REQADD="start stop exec logs prune"
START_ADDIT=""
STOP_ADDIT=""
EXEC_ADDIT=""
LOGS_ADDIT=""

DOCKER_MYSQL_SET="mysql_dump mysql_restore"
DOCKER_MYSQL_DESC="Backup and Restore a MySQL Database"
DOCKER_MYSQL_REQADD="mysql_dump mysql_restore"
DOCKER_MYSQL_DUMP_ADDIT=""
DOCKER_MYSQL_RESTORE_ADDIT=""

DOCKER_PASSWD_SET="passwd"
DOCKER_PASSWD_DESC="Show password sensitive information"
DOCKER_PASSWD_REQADD="passwd"
PASSWD_ADDIT="show"

D4D_UPDATE_SET="update_env"
D4D_UPDATE_DESC="Get latest D4D script with or without new packages"
D4D_UPDATE_REQADD=""

DOCKER_D4D_SET="opt_help set"
DOCKER_D4D_DESC="Docker related options/functions"
DOCKER_D4D_REQADD="opt_help set"
OPT_HELP_ADDIT="(full)"
SET_ADDIT="option_name value"

##################################################

# ALL SETTINGS
# SECTIONS OF OPTIONS
ALL_SECTIONS="D4D_SETTINGS NGINX_SETTINGS PHP_SETTINGS MYSQL_SETTINGS DEBIAN_SETTINGS NODE_JS_SETTINGS PMA_SETTINGS"

D4D_SETTINGS="PROJECT_TYPE YARN WKHTMLTOPDF"

NGINX_SETTINGS="NGINX_CACHE"

PHP_SETTINGS="PHP_VERSION XDEBUG IONCUBE"

MYSQL_SETTINGS="MYSQL_VERSION"

DEBIAN_SETTINGS="DEBIAN_VERSION"

NODE_JS_SETTINGS="NODE_JS_VERSION"

PMA_SETTINGS="PMA_AUTO_LOGIN"

showVersion() {
    echo "${DOCKER_SCRIPT_VER} (rev: 0001)"
}

generateHelp() {
    for section in ${HELP_SECTIONS}; do
        DESC=${section}_DESC
        echo " +-----------------------------------------------------------+"
        printf " | %-55s %-2s|\n" "$(eval_var ${DESC}):"

        BUILDSET="${section}_SET"
        BUILD_ADD_TO_OUT="${section}_REQADD"
        for setting in $(eval_var ${BUILDSET}); do
            ADDIT=""
            for i in $(eval_var ${BUILD_ADD_TO_OUT}); do
                ADDIT_VAR=`echo "${i}_ADDIT" | tr "[a-z]" "[A-Z]"`
                if [ "$i" = "${setting}" ]; then
                    ADDIT="$(eval_var ${ADDIT_VAR})"
                fi
                done
                printf " | %-55s %-2s|\n" "   $0 ${setting} ${ADDIT}"
            done
    done
}

doCheckPackage() {
    # $1 package name

    which $1 > /dev/null 2>&1
    if [ $? != 0 ]; then
        case "$1" in
            pwgen)
                if [ ${OS} = "FreeBSD" ]; then
            		    pkg install $1
                elif [ -e ${DEBIAN_VERSION} ]; then
                    apt-get install $1
                else
                    if [ ${OS_CENTOS_VERSION} = "7" ]; then
                        wget http://download-ib01.fedoraproject.org/pub/epel/7/x86_64/Packages/p/pwgen-2.08-1.el7.x86_64.rpm && rpm -ivh pwgen-2.08-1.el7.x86_64.rpm && rm pwgen-2.08-1.el7.x86_64.rpm
                    fi

                    if [ ${OS_CENTOS_VERSION} = "8" ]; then
                        wget https://download-ib01.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/p/pwgen-2.08-3.el8.x86_64.rpm && rpm -ivh pwgen-2.08-3.el8.x86_64.rpm && rm pwgen-2.08-3.el8.x86_64.rpm
                    fi
                fi
                ;;
            docker)
                if [ ${OS} = "FreeBSD" ]; then
            		    curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh && sudo usermod -aG docker ${USER} && rm get-docker.sh
                elif [ -e ${DEBIAN_VERSION} ]; then
                    curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh && sudo usermod -aG docker ${USER} && rm get-docker.sh
                else
                    if [ ${OS_CENTOS_VERSION} != "8" ]; then
                        curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh && sudo usermod -aG docker ${USER} && rm get-docker.sh
                    else
                        sudo dnf install https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm && curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh && sudo usermod -aG docker ${USER} && rm get-docker.sh
                    fi
                fi
                ;;
            docker-compose)
                sudo curl -L "https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose && sudo chmod +x /usr/local/bin/docker-compose
                ;;
            certutil)
                if [ ${OS} = "FreeBSD" ]; then
			        pkg install libnss3-tools
		        elif [ -e ${DEBIAN_VERSION} ]; then
			        apt-get install libnss3-tools
		        else
			        yum install libnss3-tools
		        fi
                ;;
            mkcert)
                export VER="v1.4.1" && wget -O mkcert https://github.com/FiloSottile/mkcert/releases/download/${VER}/mkcert-${VER}-linux-amd64 && chmod +x mkcert && mv mkcert /usr/local/bin
                ;;

            * )
                if [ ${OS} = "FreeBSD" ]; then
			              pkg install $1
		            elif [ -e ${DEBIAN_VERSION} ]; then
			              apt-get install $1
		            else
			              yum install $1
		            fi
                ;;
        esac
    fi
}

doRemovePackage() {
    # $1 package name

    which $1 > /dev/null 2>&1
    if [ $? == 0 ]; then
        case "$1" in
            docker)
                if [ ${OS} = "FreeBSD" ]; then
			        pkg remove docker-ce docker-ce-cli
		        elif [ -e ${DEBIAN_VERSION} ]; then
			        apt-get remove docker-ce docker-ce-cli
		        else
			        yum remove docker-ce docker-ce-cli
		        fi
                ;;
            docker-compose)
                rm /usr/local/bin/docker-compose
                ;;
            certutil)
                if [ ${OS} = "FreeBSD" ]; then
                    pkg remove libnss3-tools
            	elif [ -e ${DEBIAN_VERSION} ]; then
            	    apt-get remove libnss3-tools
            	else
            	    yum remove libnss3-tools
                fi
                ;;
            mkcert)
                rm /usr/local/bin/mkcert
                ;;
            * )
                if [ ${OS} = "FreeBSD" ]; then
			              pkg remove $1
		            elif [ -e ${DEBIAN_VERSION} ]; then
			              apt-get remove $1
		            else
			              yum remove $1
		            fi
                ;;
        esac
    fi
}

doInstall() {
    if [ "$(id -u)" != "0" ]; then
	      echo "You must be root to execute the script. Exiting."
        exit 1
    fi

    if [ "${OS_CENTOS_VERSION}" = "6" ]; then
        echo "Unsupported distribution. Exiting."
        exit 1
    fi

    # Install PWGen
    doCheckPackage pwgen

    # Install cURL
    doCheckPackage curl

    # Install the latest Docker CE version
    doCheckPackage docker

    # Install the latest Docker Compose
    doCheckPackage docker-compose

    # Install certutil
    doCheckPackage certutil

    # Install mkcert
    doCheckPackage mkcert
}

doUninstall() {
    if [ "$(id -u)" != "0" ]; then
	      echo "You must be root to execute the script. Exiting."
        exit 1
    fi

    if [ "${OS_CENTOS_VERSION}" = "6" ]; then
        echo "Unsupported distribution. Exiting."
        exit 1
    fi

	# Remove PWGen
    doRemovePackage pwgen

    # Remove Docker CE
    doRemovePackage docker

    # Remove Docker Compose
    doRemovePackage docker-compose

    # Remove certutil
    doRemovePackage certutil

    # Remove mkcert
    doRemovePackage mkcert
}

start() {
    ./main start

    # Load .env file into the current shell script
    source ${D4D_ENV}

    COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1 docker-compose build --parallel

    # Clears the screen.
    clear

    # Start server
    echo "Starting docker containers..."
    docker-compose --env-file ${D4D_ENV} up -d --remove-orphans

    if [ "${SUPERVISOR}" = "yes" ]; then
        echo "Starting supervisor..."
        docker-compose exec -u root php service supervisor start && docker-compose exec -u root php supervisorctl reread && docker-compose exec -u root php supervisorctl update && docker-compose exec -u root php supervisorctl start messenger-consume:*
    fi

    # Documentation for end user
    echo ""
    echo "The following information has been set:"
    echo ""
    echo "Server IP: 127.0.0.1"
    echo "Server Hostname: ${PROJECT_DOMAIN_1}"
    echo ""
    echo "To login now, follow this link:"
    echo ""
    echo "Project URL: http://${PROJECT_DOMAIN_1}"
    echo "phpMyAdmin: http://${PROJECT_DOMAIN_1}:${PORT_PMA}"

    if [ "${MAILHOG}" = "yes" ] || [ "${RABBITMQ}" = "yes" ] || [ "${ELASTICSEARCH}" = "yes" ]; then
        echo ""
        echo "Extra features:"
    fi

    if [ "${MAILHOG}" = "yes" ]; then
        echo "MailHog: http://${PROJECT_DOMAIN_1}:${PORT_MAILHOG_HTTP}"
    fi

    if [ "${RABBITMQ}" = "yes" ]; then
        echo "RabbitMQ: http://${PROJECT_DOMAIN_1}:${PORT_RABBITMQ_MANAGEMENT}"
    fi

    if [ "${ELASTICSEARCH}" = "yes" ]; then
        echo "Elasticsearch: http://${PROJECT_DOMAIN_1}:${PORT_ELASTICSEARCH_HEAD}"
    fi

    echo ""
    echo "Thank you for using Docker for Symfony. Should you have any questions, don't hesitate to contact us at support@d4d.lt"

    if [ "${DEFAULT_CONTAINER}" != "" ]; then
        dockerComposeExec ${DEFAULT_CONTAINER}
    fi
}

stop() {
    docker-compose down
}

restart() {
    ./d4d stop && ./d4d start
}

dockerComposeExec() {
    # $1 command
    # $2 user

    if [ "${1}" == "php" ] && [ "${2}" != "" ]; then
        docker-compose exec -u $2 $1 bash
    else
        docker-compose exec $1 bash
    fi
}

logs() {
    # $1 command

    CURRENT_DIR=`basename ${WORK_DIR}`
    CONTAINER_NAME="${CURRENT_DIR}_${1}_1"
    CONTAINER_ID=`docker ps -aqf name=^${CONTAINER_NAME}$`

    docker logs -f ${CONTAINER_ID}
}

doMysqlDump() {
    # Load .env file into the current shell script
    source ${D4D_ENV}

    docker-compose exec mysql bash /tmp/db/mysql_dump.sh
}

doDockerBackup() {
    if [ "$(id -u)" != "0" ]; then
  	    echo "You must be root to execute the script. Exiting."
        exit 1
    fi

    if [ "${OS_CENTOS_VERSION}" = "6" ]; then
        echo "Unsupported distribution. Exiting."
        exit 1
    fi

    PROJECT_DIR="`basename ${WORK_DIR}`"
    FILE_NAME="${PROJECT_DIR}_$(date +%Y%m%d_%H%M%S).tar.gz"

    tar -zcf "../${FILE_NAME}" --exclude={"${PROJECT_DIR}/project/vendor","${PROJECT_DIR}/project/node_modules","${PROJECT_DIR}/project/var/cache","${PROJECT_DIR}/project/var/log","${PROJECT_DIR}/symfony"} "../${PROJECT_DIR}"
}

doPrune() {
    # Remove all unused containers, networks, images (both dangling and unreferenced), and optionally, volumes.
    docker system prune --volumes -a
}

doPasswd() {
    # $1 command
    COMMAND=$1

    if [ "${COMMAND}" = "show" ]; then
        ./main d4d:passwd:show
    fi
}

blackfire() {
    source ${ENV}

    # $1 command
    COMMAND=$1

    if [ "${BLACKFIRE}" = "yes" ]; then
        if [ "${COMMAND}" = "register" ]; then
            echo "Register Blackfire..."
            docker-compose exec -u root php blackfire agent:config --server-id=${BLACKFIRE_SERVER_ID} --server-token=${BLACKFIRE_SERVER_TOKEN}
            docker-compose exec -u root php mkdir -p /var/run/blackfire
        fi

        if [ "${COMMAND}" = "start" ] || [ "${COMMAND}" == "stop" ] || [ "${COMMAND}" == "restart" ]; then
            docker-compose exec -u root php blackfire agent:${COMMAND}
        fi
    fi
}

mkcert() {
    source ${ENV}

    # $1 command
    COMMAND=$1
    if [ "${NGINX_SSL}" = "yes" ]; then
        if [ "${COMMAND}" = "install" ]; then
            echo "Install the local CA in the system trust store."
            /usr/local/bin/mkcert -install

            ./d4d mkcert ssl
        fi

        if [ "${COMMAND}" = "ssl" ]; then
            DOMAINS="${PROJECT_DOMAIN_1} ${PROJECT_DOMAIN_2} ${PROJECT_DOMAIN_3} ${PROJECT_DOMAIN_4}"
            /usr/local/bin/mkcert -cert-file ${WORK_DIR}/user/nginx/ssl/d4d.pem -key-file ${WORK_DIR}/user/nginx/ssl/d4d-key.pem ${DOMAINS}
        fi
    fi
}

allSettings() {
	for section in $ALL_SECTIONS; do
		DESC=${section}_DESC
		echo "------------------------------------------"
		echo "$(eval_var ${DESC})"
		echo "------------------------------------------"
		for setting in $(eval_var ${section}); do
			SETTING_NAME=`echo $setting | tr "[A-Z]" "[a-z]"`
			POSSIBLE_VALUES_VAR=${setting}_SET
			POSSIBLE_VALUES="`echo $(eval_var ${POSSIBLE_VALUES_VAR}) | awk -v OFS=", " '$1=$1'`"
			DEFAULT_VALUE=${setting}_DEF
			CURRENT_VALUE=${setting}_OPT
			echo -n "${SETTING_NAME}: ${POSSIBLE_VALUES}. Current value: $(eval_var ${CURRENT_VALUE}). Default value: $(eval_var ${DEFAULT_VALUE})."
			if [ "$1" = "full" ]; then
				DESCRIPTION="${setting}_DESC"
				echo " Description: $(eval_var ${DESCRIPTION})"
			else
				echo ""
			fi
		done
		echo ""
	done
}

git() {
    awk 'NR==1,/.env.secret/' ${D4D_ENV} > ${WORK_DIR}/.env.git

    if [ "$OS" = 'Darwin' ]; then
        # for MacOS
        sed -i '' '$d' ${WORK_DIR}/.env.git
    else
        # for Linux and Windows
        sed -i'' '$d' ${WORK_DIR}/.env.git
    fi
}

info() {
    source ${D4D_ENV}

    IP_NGINX=`getContainerIpAddress nginx`
    IP_PHP=`getContainerIpAddress php`
    IP_MYSQL=`getContainerIpAddress mysql`
    IP_PMA=`getContainerIpAddress phpmyadmin`

    NGINX_INFO=`docker-compose exec nginx dpkg -s nginx | grep '^Version: ' | cut -d '-' -f1`

    case "${MYSQL_INST}" in
        mysql)
            if [ "${MYSQL_VERSION}" != "8.0" ]; then
               MYSQL_INFO=`docker-compose exec mysql dpkg -s mysql-server | grep '^Version' | cut -d ':' -f2 | cut -d ' ' -f2 | cut -d '-' -f1`
            else
                MYSQL_INFO=`docker-compose exec mysql dpkg -s mysql-common | grep '^Version' | cut -d ':' -f2 | cut -d ' ' -f2 | cut -d '-' -f1`
            fi
            ;;
        mariadb)
            MYSQL_INFO=`docker-compose exec mysql dpkg -s mariadb-server | grep '^Version' | cut -d ':' -f3 | cut -d '+' -f1`
            ;;
        * )
            MYSQL_INFO=`docker-compose exec mysql dpkg -s mysql-server | grep '^Version' | cut -d ':' -f2 | cut -d ' ' -f2 | cut -d '-' -f1`
            ;;
    esac

    PHP_INFO=`docker-compose exec php php -v | grep '^PHP' | cut -d ' ' -f2 | tr -d "\r\n"`

    mainHeader
    printf " | %-55s %-2s|\n" "Docker Information:"
    printf " | %-55s %-2s|\n" "`docker --version`"
    printf " | %-55s %-2s|\n" "`docker-compose --version`"
    printf " +%-55s+\n" "-----------------------------------------------------------"
    printf " | %-55s %-2s|\n" "D4D Information:"
    printf " | %-55s %-2s|\n" "NGINX: ${NGINX_INFO}"
    printf " | %-55s %-2s|\n" "PHP: ${PHP_INFO}"
    printf " | %-55s %-2s|\n" "MySQL: ${MYSQL_INFO}"
    printf " +%-55s+\n" "-----------------------------------------------------------"
    printf " | %-55s %-2s|\n" "IP Information:"
    printf " | %-55s %-2s|\n" "NGINX: ${IP_NGINX}"
    printf " | %-55s %-2s|\n" "PHP: ${IP_PHP}"
    printf " | %-55s %-2s|\n" "MySQL: ${IP_MYSQL}"
    printf " | %-55s %-2s|\n" "phpMyAdmin: ${IP_PMA}"
    printf " +%-55s+\n" "-----------------------------------------------------------"
}

updateImages() {
    source ${D4D_ENV}

    IMAGES=('debian:'${DEBIAN_VERSION} 'php:'${PHP_VERSION}'-fpm')

    if [ "${MYSQL_INST}" = "mysql" ]; then
        IMAGES+=('mysql:'${MYSQL_VERSION})
    elif [ "${MYSQL_INST}" = "mariadb" ]; then
        IMAGES+=('mariadb:'${MARIADB_VERSION})
    fi

    if [ "${MAILHOG}" = "yes" ]; then
        IMAGES+=('mailhog/mailhog')
    fi

    if [ "${PMA}" = "yes" ]; then
        IMAGES+=('phpmyadmin/phpmyadmin')
    fi

    if [ "${REDIS}" = "yes" ]; then
        IMAGES+=('redis:latest')
    fi

    if [ "${RABBITMQ}" = "yes" ]; then
        IMAGES+=('rabbitmq:'${RABBITMQ_VERSION}'-management')
    fi

    if [ "${ELASTICSEARCH}" = "yes" ]; then
        IMAGES+=('docker.elastic.co/elasticsearch/elasticsearch:'${ELASTICSEARCH_VERSION})
        IMAGES+=('tobias74/elasticsearch-head:6')
    fi

    if [ "${NGROK}" = "yes" ]; then
        IMAGES+=('wernight/ngrok:latest')
    fi

    if [ "${MONGODB}" = "yes" ]; then
        IMAGES+=('mongo:'${MONGODB_VERSION})
    fi

    if [ "${BLACKFIRE}" = "yes" ]; then
        IMAGES+=('blackfire/blackfire')
    fi

    for i in "${IMAGES[@]}"
    do
      docker pull $i
    done
}

mainHeader() {
    printf " +%-55s+\n" "-----------------------------------------------------------"
    printf " | %-55s %-2s|\n" "Docker for Symfony (PHP-FPM - NGINX - MySQL)"
    printf " | %-55s %-2s|\n" "Written by Vasilij Dusko"
    printf " | %-55s %-2s|\n" "Version: $(showVersion)"
    printf " +%-55s+\n" "-----------------------------------------------------------"
}

showHelp() {
    mainHeader
    generateHelp
    printf " +%-55s+\n" "-----------------------------------------------------------"
}

case "$1" in
    install) doInstall;
        ;;
    uninstall) doUninstall;
        ;;
    start) start
        ;;
    stop) stop
        ;;
    restart) restart
        ;;
    exec) dockerComposeExec $2 $3
        ;;
    logs) logs $2
        ;;
    prune) doPrune
        ;;
    mysql_dump) doMysqlDump
        ;;
    docker_backup) doDockerBackup
        ;;
    passwd) doPasswd $2
        ;;
    blackfire) blackfire $2
        ;;
    mkcert) mkcert $2
        ;;
    opt_help) allSettings $2
        ;;
    git) git
        ;;
    info) info
        ;;
    update_images) updateImages
        ;;
    * ) showHelp
        exit 0
        ;;
esac
